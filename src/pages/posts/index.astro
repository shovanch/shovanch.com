---
import Navigation from '~/components/nav.astro';
import BaseHead from '~/components/base-head.astro';
import { defaultMeta } from '~/config/site';
import RootLayout from '~/layouts/root-layout.astro';
import { getCollection } from 'astro:content';
import PostCard from '~/components/post-card.astro';
import { filterAndSortContent } from '~/utils/content-operations';
import MobileTagsFilter from '~/components/mobile-tags-filter.astro';

const allPosts = await getCollection('posts');
const posts = filterAndSortContent(allPosts);

// Use posts directly without year grouping
const sortedPosts = posts;

// Get all unique tags with counts
const tagCounts = posts.reduce(
  (acc, post) => {
    if (post.data.tags) {
      post.data.tags.forEach((tag) => {
        acc[tag] = (acc[tag] || 0) + 1;
      });
    }
    return acc;
  },
  {} as Record<string, number>,
);

const sortedTags = Object.entries(tagCounts).sort(([, a], [, b]) => b - a);
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead
      title="Posts  â€¢  Shovan Chatterjee"
      description={defaultMeta.description}
    />
  </head>
  <RootLayout>
    <Navigation />

    <main class="flex w-full flex-col gap-6">
      <div class="flex flex-col gap-2">
        <h1 class="text-theme-text font-sans text-4xl font-semibold">Posts</h1>
        <p class="text-theme-text-secondary text-lg">
          Thoughts on software, design, and life.
        </p>
      </div>

      <!-- Mobile Tags Filter -->
      <MobileTagsFilter
        tags={sortedTags}
        totalCount={posts.length}
        mode="simple"
        showCloseIcons={true}
      />

      <div class="relative">
        <!-- Posts Section -->
        <div class="w-full">
          <div id="posts-container">
            <ul class="not-prose flex flex-col gap-2 pl-0 md:gap-4">
              {
                sortedPosts.map((post) => (
                  <li class="post-item" data-tags={post.data.tags?.join(',')}>
                    <PostCard post={post} />
                  </li>
                ))
              }
            </ul>
          </div>
        </div>

        <!-- Desktop Tags Sidebar -->
        <aside class="absolute top-0 -right-[25%] hidden w-48 md:block">
          <div class="sticky top-8">
            <div class="flex flex-col text-right text-base">
              <button
                class="tag-filter text-theme-text-secondary hover:text-theme-text flex cursor-pointer items-center justify-end gap-1 py-1 outline-none focus:outline-none"
                data-tag="all"
              >
                <span>All</span>
                <span class="text-theme-text-secondary">{posts.length}</span>
              </button>
              {
                sortedTags.map(([tag, count]) => (
                  <button
                    class="tag-filter text-theme-text-secondary hover:text-theme-text flex cursor-pointer items-center justify-end gap-1 py-1 outline-none focus:outline-none"
                    data-tag={tag}
                  >
                    <span class="">#{tag}</span>
                    <span class="text-theme-text-secondary">{count}</span>
                  </button>
                ))
              }
            </div>
          </div>
        </aside>
      </div>
    </main>

    <script>
      // Tag filtering functionality with URL parameter support
      const tagFilters = document.querySelectorAll(
        '.tag-filter',
      ) as NodeListOf<HTMLButtonElement>;
      const postItems = document.querySelectorAll(
        '.post-item',
      ) as NodeListOf<HTMLLIElement>;

      // Function to get URL parameter
      function getUrlParam(param: string): string | null {
        const urlParams = new URLSearchParams(window.location.search);
        return urlParams.get(param);
      }

      // Function to set URL parameter
      function setUrlParam(param: string, value: string) {
        const url = new URL(window.location.href);
        if (value === 'all') {
          url.searchParams.delete(param);
        } else {
          url.searchParams.set(param, value);
        }
        window.history.pushState({}, '', url.toString());
      }

      // Function to apply filter
      function applyFilter(selectedTag: string | null) {
        const tag = selectedTag || 'all';

        // Reset all posts to visible first
        postItems.forEach((item) => {
          (item as HTMLElement).style.display = 'block';
        });

        // No year sections to reset

        // Update active states for all filters
        tagFilters.forEach((f) => {
          // Reset desktop styles
          f.classList.remove('text-theme-text', 'font-bold');
          f.classList.add('text-theme-text-secondary');

          // Reset mobile styles
          f.classList.remove(
            'font-bold',
            'text-theme-text',
            'border-theme-text',
          );
          f.classList.add(
            'font-normal',
            'text-theme-text-secondary',
            'border-theme-border',
          );
        });

        // Find and activate the correct filter
        const activeFilters = Array.from(tagFilters).filter(
          (f) => (f as HTMLElement).dataset.tag === tag,
        );
        activeFilters.forEach((activeFilter) => {
          // Desktop active styles (only for desktop sidebar)
          if (activeFilter.closest('aside')) {
            activeFilter.classList.remove('text-theme-text-secondary');
            activeFilter.classList.add('text-theme-text', 'font-bold');
          }

          // Mobile active styles (only for mobile filter)
          if (!activeFilter.closest('aside')) {
            activeFilter.classList.remove(
              'font-normal',
              'text-theme-text-secondary',
              'border-theme-border',
            );
            activeFilter.classList.add(
              'font-bold',
              'text-theme-text',
              'border-theme-text',
            );
          }
        });

        // Filter posts only if not "all"
        if (tag !== 'all') {
          postItems.forEach((item) => {
            const postTags = item.dataset.tags
              ? item.dataset.tags.split(',')
              : [];

            if (!postTags.includes(tag)) {
              (item as HTMLElement).style.display = 'none';
            }
          });
        }
      }

      // Initialize filter based on URL parameter on page load
      document.addEventListener('DOMContentLoaded', () => {
        const initialTag = getUrlParam('tag');
        applyFilter(initialTag);
      });

      // Add click event listeners
      tagFilters.forEach((filter) => {
        filter.addEventListener('click', () => {
          const selectedTag = filter.dataset.tag;
          if (selectedTag) {
            setUrlParam('tag', selectedTag);
            applyFilter(selectedTag);
          }
        });
      });

      // Handle browser back/forward navigation
      window.addEventListener('popstate', () => {
        const tag = getUrlParam('tag');
        applyFilter(tag);
      });
    </script>
  </RootLayout>
</html>
